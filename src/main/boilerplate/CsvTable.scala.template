// Copyright 2019 Akiomi Kamakura
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.github.akiomik.scalatest

import java.io.{File, IOException}
import java.net.URL
import java.nio.file.NoSuchFileException

import kantan.csv._
import kantan.csv.ops._
import org.scalatest.prop.Tables._

object CsvTable {

  private def unsafeReadHeader[S, H: HeaderDecoder](csv: S)(implicit cso: S => CsvSourceOps[S]): H = {
    val reader = csv.asUnsafeCsvReader[H](rfc)

    if (!reader.hasNext)
      throw new IOException("An empty csv passed.")

    reader.next()
  }

  [#private def apply[S, [#T1#]](csv: S)(
    implicit
    headerDecoderH: HeaderDecoder[([#String#])],
    headerDecoderT: HeaderDecoder[([#T1#])],
    cso: S => CsvSourceOps[S]
  ) =
    Table(
      unsafeReadHeader[S, ([#String#])](csv),
      csv.unsafeReadCsv[Seq, ([#T1#])](rfc.withHeader): _*
    )#

  ]

  [#def fromString[[#T1#]](csv: String)(implicit headerDecoder: HeaderDecoder[([#T1#])]) =
    apply[String, [#T1#]](csv)#

  ]

  [#def fromFile[[#T1#]](name: String)(implicit headerDecoder: HeaderDecoder[([#T1#])]) =
    apply[File, [#T1#]](new File(name))#

  ]

  [#def fromResource[[#T1#]](name: String)(implicit headerDecoder: HeaderDecoder[([#T1#])]) = {
    val res = Thread.currentThread.getContextClassLoader.getResource(name)
    if (res == null) throw new NoSuchFileException(name)
    apply[URL, [#T1#]](res)
  }#

  ]

}
