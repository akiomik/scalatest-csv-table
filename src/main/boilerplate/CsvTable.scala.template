package com.github.akiomik.scalatest

import java.io.IOException
import scala.io.Source

import kantan.csv._
import kantan.csv.ops._
import kantan.csv.generic._
import org.scalatest.prop.Tables._

object CsvTable {

  def unsafeReadHeader[A](csv: String)(implicit decoder: RowDecoder[A]): A = {
    val lines = csv.lines
    if (!lines.hasNext)
      throw new IOException("An empty csv passed.")

    lines.next.unsafeReadCsvRow[A](rfc)
  }

  [#def apply[[#A1#]](csv: String)(implicit decoder: RowDecoder[([#A1#])]) = {
    Table(
      unsafeReadHeader[([#String#])](csv),
      csv.unsafeReadCsv[Seq, ([#A1#])](rfc.withHeader): _*
    )
  }#

  ]

  [#def fromFile[[#A1#]](name: String)(implicit decoder: RowDecoder[([#A1#])]) = {
    val s = Source.fromFile(name)
    try apply[[#A1#]](s.getLines.mkString("\n"))
    finally s.close
  }#

  ]

  [#def fromResource[[#A1#]](name: String)(implicit decoder: RowDecoder[([#A1#])]) = {
    val s = Source.fromResource(name)
    try apply[[#A1#]](s.getLines.mkString("\n"))
    finally s.close
  }#

  ]

}
