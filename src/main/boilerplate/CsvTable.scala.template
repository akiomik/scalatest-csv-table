package com.github.akiomik.scalatest

import java.io.{File, IOException}
import java.net.URL
import java.nio.file.NoSuchFileException

import kantan.csv._
import kantan.csv.ops._
import org.scalatest.prop.Tables._

object CsvTable {

  private def unsafeReadHeader[S <% CsvSourceOps[S], H: HeaderDecoder](csv: S): H = {
    val reader = csv.asUnsafeCsvReader[H](rfc)

    if (!reader.hasNext)
      throw new IOException("An empty csv passed.")

    reader.next
  }

  [#private def apply[S <% CsvSourceOps[S], [#T1#]](csv: S)(
    implicit
    headerDecoderH: HeaderDecoder[([#String#])],
    headerDecoderT: HeaderDecoder[([#T1#])]
  ) =
    Table(
      unsafeReadHeader[S, ([#String#])](csv),
      csv.unsafeReadCsv[Seq, ([#T1#])](rfc.withHeader): _*
    )#

  ]

  [#def fromString[[#T1#]](csv: String)(implicit headerDecoder: HeaderDecoder[([#T1#])]) =
    apply[String, [#T1#]](csv)#

  ]

  [#def fromFile[[#T1#]](name: String)(implicit headerDecoder: HeaderDecoder[([#T1#])]) =
    apply[File, [#T1#]](new File(name))#

  ]

  [#def fromResource[[#T1#]](name: String)(implicit headerDecoder: HeaderDecoder[([#T1#])]) = {
    val res = Thread.currentThread.getContextClassLoader.getResource(name)
    if (res == null) throw new NoSuchFileException(name)
    apply[URL, [#T1#]](res)
  }#

  ]

}
